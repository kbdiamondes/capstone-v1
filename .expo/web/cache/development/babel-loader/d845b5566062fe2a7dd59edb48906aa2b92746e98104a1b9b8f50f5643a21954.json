{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport React, { useState } from 'react';\nimport { useNavigation, useRoute } from \"@react-navigation/native\";\nimport axios from 'axios';\nimport { Picker } from '@react-native-picker/picker';\nimport { Ionicons } from '@expo/vector-icons';\nimport { widthPercentageToDP as wp, heightPercentageToDP as hp } from 'react-native-responsive-screen';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function PaymentForm() {\n  var nameProp = useRoute().params.nameprop;\n  var priceProp = useRoute().params.priceprop;\n  var contractIdProp = useRoute().params.contractId;\n  var photoProp = useRoute().params.photo;\n  var _useState = useState(''),\n    _useState2 = _slicedToArray(_useState, 2),\n    itemName = _useState2[0],\n    setitemName = _useState2[1];\n  var _useState3 = useState(priceProp),\n    _useState4 = _slicedToArray(_useState3, 2),\n    itemPrice = _useState4[0],\n    setitemPrice = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    requiredCollectible = _useState6[0],\n    setrequiredCollectible = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    referenceNumber = _useState8[0],\n    setreferenceNumber = _useState8[1];\n  var _useState9 = useState(''),\n    _useState10 = _slicedToArray(_useState9, 2),\n    paymentType = _useState10[0],\n    setpaymentType = _useState10[1];\n  var _useState11 = useState(null),\n    _useState12 = _slicedToArray(_useState11, 2),\n    transactionProof = _useState12[0],\n    settransactionProof = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isModalVisible = _useState14[0],\n    setIsModalVisible = _useState14[1];\n  var handleModal = function handleModal() {\n    return setIsModalVisible(function () {\n      return !isModalVisible;\n    });\n  };\n  var continueButton = function continueButton() {\n    console.log(itemName);\n    console.log(itemPrice);\n    console.log(requiredCollectible);\n    console.log(referenceNumber);\n    console.log(paymentType);\n    console.log(transactionProof);\n    handleModal();\n  };\n  var confirmContract = function confirmContract() {\n    alert(\"Success\");\n    handleModal();\n  };\n  var clientIdProp = 1;\n  var navigation = useNavigation();\n  var handleUpload = function () {\n    var _ref = _asyncToGenerator(function* () {\n      try {\n        var formData = new FormData();\n        formData.append('base64Image', 'YourBase64ImageDataHere');\n        formData.append('fileName', 'YourFileNameHere.png');\n        formData.append('contentType', 'image/png');\n        var response = yield axios.post('http://localhost:8080/upload', formData, {\n          headers: {\n            'Content-Type': 'multipart/form-data',\n            'Expect': ''\n          }\n        });\n        console.log('Upload successful:', response.data);\n      } catch (error) {\n        console.error('Upload failed:', error);\n      }\n    });\n    return function handleUpload() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n  var handlePOST = function handlePOST() {\n    var data = new FormData();\n    data.append('amount', '100.00');\n    data.append('base64Image', base64Image);\n    data.append('fileName', '3.png');\n    data.append('contentType', 'image/png');\n    var clientId = 1;\n    var contractId = 1;\n    var apiUrl = `http://localhost:8080/paydues/client/${clientId}/contracts/${contractId}/pay`;\n    axios.post(apiUrl, data, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (response) {\n      console.log('Payment successful');\n      console.log(response.data);\n    }).catch(function (error) {\n      console.error('Payment failed:', error);\n    });\n  };\n  var handleSubmit = function handleSubmit() {\n    var formData = new FormData();\n    formData.append('amount', priceProp);\n    formData.append('base64Image', photoProp);\n    formData.append('fileName', 'Iphone.png');\n    formData.append('contentType', 'png');\n    axios.post(`http://localhost:8080/paydues/client/${clientIdProp}/contracts/${contractIdProp}/pay`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    }).then(function (response) {\n      console.log(priceProp);\n      console.log(photoProp);\n      console.log(response);\n      handleModal();\n    }).catch(function (error) {\n      console.log(error);\n    });\n    console.log(\"Due Amount: \" + priceProp);\n    console.log(photoProp);\n  };\n  return _jsxs(SafeAreaView, {\n    children: [_jsx(Modal, {\n      animationType: \"slide\",\n      transparent: true,\n      visible: isModalVisible,\n      children: _jsx(View, {\n        style: {\n          justifyContent: 'center',\n          alignItems: 'center',\n          flex: 1,\n          backgroundColor: 'rgba(0, 0, 0, 0.5)'\n        },\n        children: _jsxs(View, {\n          style: styles.modalView,\n          children: [_jsx(Ionicons, {\n            name: \"warning-sharp\",\n            color: \"grey\",\n            size: hp(12)\n          }), _jsx(Text, {\n            style: {\n              fontSize: hp(2.5)\n            },\n            children: \"Confirm Purchase?\"\n          }), _jsx(Text, {\n            style: {\n              fontSize: hp(1.2),\n              fontWeight: '300',\n              flexWrap: 'wrap',\n              padding: hp(1.2)\n            },\n            children: \"Are you sure about this purchase?\"\n          }), _jsx(View, {\n            style: styles.modalButtonConfirmation,\n            children: _jsx(Pressable, {\n              onPressIn: confirmContract,\n              children: _jsx(Text, {\n                style: {\n                  fontSize: hp(2),\n                  fontWeight: 'bold',\n                  color: '#fff'\n                },\n                children: \"Confirm\"\n              })\n            })\n          })]\n        })\n      })\n    }), _jsx(ScrollView, {\n      children: _jsxs(View, {\n        style: styles.container,\n        children: [_jsx(Text, {\n          style: styles.textHeader,\n          children: \"Pay Dues\"\n        }), _jsx(Text, {\n          style: styles.textSubHeader,\n          children: \"Easily pay your outstanding dues online with our convenient and secure payment platform.\"\n        }), _jsx(Text, {\n          children: itemPrice\n        }), _jsxs(View, {\n          children: [_jsx(Text, {\n            style: styles.textLabel,\n            children: \"Item Name\"\n          }), _jsx(TextInput, {\n            defaultValue: nameProp,\n            style: styles.textInput,\n            placeholder: \"Enter item name\"\n          }), _jsx(Text, {\n            style: styles.textLabel,\n            children: \"Item Price\"\n          }), _jsx(TextInput, {\n            defaultValue: priceProp,\n            keyboardType: 'numeric',\n            style: styles.textInput,\n            placeholder: \"Enter amount to be paid\"\n          }), _jsx(Text, {\n            style: styles.textLabel,\n            children: \"Required Collectible\"\n          }), _jsx(TextInput, {\n            onChangeText: function onChangeText(e) {\n              return setrequiredCollectible(parseInt(e));\n            },\n            style: styles.textInput,\n            editable: false,\n            value: \"2500\"\n          }), _jsx(Text, {\n            style: styles.textLabel,\n            children: \"Reference Number\"\n          }), _jsx(TextInput, {\n            onChangeText: function onChangeText(e) {\n              return setreferenceNumber(parseInt(e));\n            },\n            style: styles.textInput,\n            placeholder: \"Enter reference Number here\"\n          }), _jsx(Text, {\n            style: styles.textLabel,\n            children: \"Type of Payment\"\n          }), _jsxs(Picker, {\n            mode: \"dropdown\",\n            style: styles.d1,\n            children: [_jsx(Picker.Item, {\n              label: \"Bank\",\n              value: 'Bank'\n            }), _jsx(Picker.Item, {\n              label: \"Cash\",\n              value: 'Cash'\n            }), _jsx(Picker.Item, {\n              label: \"Over the Counter\",\n              value: 'Over the Counter'\n            })]\n          }), _jsx(View, {\n            style: styles.buttonContainer,\n            children: _jsx(Pressable, {\n              style: styles.button,\n              onPressIn: function onPressIn() {\n                return navigation.navigate('CameraShot', {\n                  nameprop: nameProp,\n                  priceprop: priceProp,\n                  contractId: contractIdProp\n                });\n              },\n              children: _jsx(Text, {\n                style: styles.buttonLabel,\n                children: \"Take picture\"\n              })\n            })\n          }), _jsx(View, {\n            style: styles.buttonContainer,\n            children: _jsx(Pressable, {\n              style: styles.button,\n              onPressIn: handleUpload,\n              children: _jsx(Text, {\n                style: styles.buttonLabel,\n                children: \"Continue\"\n              })\n            })\n          })]\n        })]\n      })\n    })]\n  });\n  var base64Image = \"\";\n}\nvar styles = StyleSheet.create({\n  container: {\n    paddingTop: 120,\n    paddingHorizontal: 21\n  },\n  textHeader: {\n    fontSize: 32,\n    fontWeight: 'bold',\n    color: '#203949',\n    paddingHorizontal: 15\n  },\n  textSubHeader: {\n    fontSize: 18,\n    color: '#203949',\n    paddingHorizontal: 15,\n    paddingVertical: 10,\n    marginBottom: 10\n  },\n  textLabel: {\n    paddingTop: 15,\n    fontSize: 15,\n    paddingHorizontal: 15,\n    marginVertical: 5\n  },\n  textInput: {\n    fontSize: 17,\n    paddingHorizontal: 15,\n    marginHorizontal: 15,\n    marginVertical: 5,\n    borderColor: \"#523009\",\n    borderWidth: .5\n  },\n  buttonContainer: {\n    padding: 5,\n    height: 50,\n    backgroundColor: '#2C85E7',\n    marginLeft: 10,\n    justifyContent: 'space-evenly',\n    borderRadius: 5,\n    width: '50%',\n    alignSelf: 'center',\n    margin: 7\n  },\n  button: {\n    borderRadius: 10,\n    width: '100%',\n    height: '100%',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row'\n  },\n  buttonLabel: {\n    color: '#fff',\n    fontSize: 12\n  },\n  d1: {\n    height: 40,\n    borderRadius: 5,\n    width: '50%'\n  },\n  modalButtonConfirmation: {\n    marginTop: hp(2),\n    backgroundColor: '#2C85E7',\n    width: wp(35),\n    height: hp(6.5),\n    alignItems: 'center',\n    justifyContent: 'center',\n    borderRadius: 5\n  },\n  modalView: {\n    alignItems: 'center',\n    justifyContent: 'center',\n    margin: hp(5),\n    backgroundColor: 'white',\n    borderRadius: 20,\n    padding: hp(5),\n    shadowColor: '#000',\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5\n  }\n});","map":{"version":3,"names":["React","useState","useNavigation","useRoute","axios","Picker","Ionicons","widthPercentageToDP","wp","heightPercentageToDP","hp","jsx","_jsx","jsxs","_jsxs","PaymentForm","nameProp","params","nameprop","priceProp","priceprop","contractIdProp","contractId","photoProp","photo","_useState","_useState2","_slicedToArray","itemName","setitemName","_useState3","_useState4","itemPrice","setitemPrice","_useState5","_useState6","requiredCollectible","setrequiredCollectible","_useState7","_useState8","referenceNumber","setreferenceNumber","_useState9","_useState10","paymentType","setpaymentType","_useState11","_useState12","transactionProof","settransactionProof","_useState13","_useState14","isModalVisible","setIsModalVisible","handleModal","continueButton","console","log","confirmContract","alert","clientIdProp","navigation","handleUpload","_ref","_asyncToGenerator","formData","FormData","append","response","post","headers","data","error","apply","arguments","handlePOST","base64Image","clientId","apiUrl","then","catch","handleSubmit","SafeAreaView","children","Modal","animationType","transparent","visible","View","style","justifyContent","alignItems","flex","backgroundColor","styles","modalView","name","color","size","Text","fontSize","fontWeight","flexWrap","padding","modalButtonConfirmation","Pressable","onPressIn","ScrollView","container","textHeader","textSubHeader","textLabel","TextInput","defaultValue","textInput","placeholder","keyboardType","onChangeText","e","parseInt","editable","value","mode","d1","Item","label","buttonContainer","button","navigate","buttonLabel","StyleSheet","create","paddingTop","paddingHorizontal","paddingVertical","marginBottom","marginVertical","marginHorizontal","borderColor","borderWidth","height","marginLeft","borderRadius","width","alignSelf","margin","flexDirection","marginTop","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation"],"sources":["C:/Users/User/Documents/GitHub/Capstone/collectify/collectify-front-end/src/Components/Client/PaymentForm.tsx"],"sourcesContent":["import {SafeAreaView, View, Text, StyleSheet, ScrollView, TextInput, Pressable, Modal} from 'react-native';\r\nimport React, { useState } from 'react';\r\nimport CameraCapture from './Camera';\r\nimport { RouteProp, useNavigation, useRoute } from \"@react-navigation/native\";\r\nimport axios from 'axios';\r\nimport { CheckScreenNavigationprop, RootStackParamList } from '../../../App';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport {Ionicons} from '@expo/vector-icons'\r\nimport {widthPercentageToDP as wp, heightPercentageToDP as hp} from 'react-native-responsive-screen';\r\n\r\nexport default function PaymentForm(){\r\n    const nameProp = useRoute<RouteProp<RootStackParamList, 'PaymentForm'>>().params.nameprop;\r\n    const priceProp = useRoute<RouteProp<RootStackParamList, 'PaymentForm'>>().params.priceprop;\r\n    const contractIdProp = useRoute<RouteProp<RootStackParamList, 'PaymentForm'>>().params.contractId;\r\n    const photoProp = useRoute<RouteProp<RootStackParamList, 'PaymentForm'>>().params.photo;\r\n    const [itemName, setitemName] = useState('')\r\n    const [itemPrice, setitemPrice] = useState(priceProp)\r\n    const [requiredCollectible, setrequiredCollectible] = useState(0)\r\n    const [referenceNumber, setreferenceNumber] = useState(0)\r\n    const [paymentType, setpaymentType] = useState('')\r\n    const [transactionProof, settransactionProof] = useState<any>(null)\r\n    const [isModalVisible, setIsModalVisible] = useState(false)\r\n    const handleModal = () => setIsModalVisible(()=>!isModalVisible)\r\n\r\n     //checks passed data from console\r\n     const continueButton = () => {\r\n        console.log(itemName);\r\n        console.log(itemPrice);\r\n        console.log(requiredCollectible);\r\n        console.log(referenceNumber);\r\n        console.log(paymentType);\r\n        console.log(transactionProof);\r\n        handleModal() //shows the modal\r\n    }\r\n\r\n    const confirmContract = () =>{\r\n        alert(\"Success\")\r\n        handleModal() //hides the modal\r\n        //pass value here\r\n    }\r\n\r\n    let clientIdProp = 1;\r\n\r\n\r\n\r\n    const navigation  = useNavigation<CheckScreenNavigationprop>();\r\n\r\n    const handleUpload = async () => {\r\n        try {\r\n          const formData = new FormData();\r\n          formData.append('base64Image', 'YourBase64ImageDataHere');\r\n          formData.append('fileName', 'YourFileNameHere.png');\r\n          formData.append('contentType', 'image/png');\r\n      \r\n          const response = await axios.post('http://localhost:8080/upload', formData, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data',\r\n              'Expect': '',\r\n            },\r\n\r\n          });\r\n      \r\n          console.log('Upload successful:', response.data);\r\n          // Handle the response data as needed\r\n        } catch (error) {\r\n          console.error('Upload failed:', error);\r\n          // Handle errors\r\n        }\r\n      };\r\n\r\n    const handlePOST = () => {\r\n        // Define the data to send in the request\r\n        const data = new FormData();\r\n        data.append('amount', '100.00'); // Replace with the actual amount\r\n        data.append('base64Image', base64Image); // Replace with your base64 image data\r\n        data.append('fileName', '3.png'); // Replace with the desired file name\r\n        data.append('contentType', 'image/png'); // Replace with the content type\r\n      \r\n        // Define the URL with client and contract IDs\r\n        const clientId = 1; // Replace with the actual client ID\r\n        const contractId = 1; // Replace with the actual contract ID\r\n        const apiUrl = `http://localhost:8080/paydues/client/${clientId}/contracts/${contractId}/pay`;\r\n      \r\n        // Make the Axios POST request with the \"multipart/form-data\" content type\r\n        axios\r\n          .post(apiUrl, data, {\r\n            headers: {\r\n              'Content-Type': 'multipart/form-data', // Set the content type\r\n            },\r\n          })\r\n          .then(function (response) {\r\n            // Handle the successful response here\r\n            console.log('Payment successful');\r\n            console.log(response.data); // You can access the response data here\r\n          })\r\n          .catch(function (error) {\r\n            // Handle errors here\r\n            console.error('Payment failed:', error);\r\n          });\r\n      };\r\n      \r\n      \r\n      \r\n    const handleSubmit = () => {\r\n        const formData = new FormData();\r\n        formData.append('amount', priceProp);\r\n        formData.append('base64Image', photoProp);\r\n        formData.append('fileName', 'Iphone.png');\r\n        formData.append('contentType', 'png');\r\n        \r\n        axios.post(`http://localhost:8080/paydues/client/${clientIdProp}/contracts/${contractIdProp}/pay`, formData, {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data' // Corrected header value\r\n          }\r\n        })\r\n        .then(function (response) {\r\n          console.log(priceProp);\r\n          console.log(photoProp);\r\n          console.log(response);\r\n          handleModal();\r\n        })\r\n        .catch(function (error) {\r\n          console.log(error);\r\n        });\r\n      \r\n        console.log(\"Due Amount: \" + priceProp);\r\n        console.log(photoProp);\r\n      }\r\n      \r\n      \r\n    /* const clickSubmit = ()=>{\r\n        axios.post('http://collectify-kilvey-services.onrender.com/paydues/client/1/contracts/1/pay', {\r\n            requiredCollectible: \r\n\r\n      })\r\n    .then(function (response) {\r\n      console.log(response);\r\n    })\r\n    .catch(function (error) {\r\n      console.log(error);\r\n    });}\r\n\r\n      const Submit = ()=> {\r\n        clickSubmit()\r\n        handleSubmit()\r\n    }*/\r\n   \r\n    return(\r\n//modal\r\n        \r\n\r\n\r\n        <SafeAreaView>\r\n            <Modal animationType=\"slide\" transparent={true} visible={isModalVisible}>\r\n                <View style={{justifyContent: 'center', alignItems: 'center', flex:1, backgroundColor: 'rgba(0, 0, 0, 0.5)'}}>\r\n\r\n                    <View style={styles.modalView}>\r\n\r\n                        <Ionicons name=\"warning-sharp\" color=\"grey\" size={hp(12)}></Ionicons>\r\n                        <Text style={{fontSize: hp(2.5)}}>Confirm Purchase?</Text>\r\n                        <Text style={{fontSize: hp(1.2), fontWeight: '300', flexWrap: 'wrap', padding: hp(1.2)}}>Are you sure about this purchase?</Text>\r\n                        <View style={styles.modalButtonConfirmation}>\r\n                            <Pressable onPressIn={confirmContract}>\r\n                                <Text style={{fontSize: hp(2), fontWeight: 'bold', color: '#fff'}}>Confirm</Text>\r\n                            </Pressable>\r\n                        </View>         \r\n                    </View>\r\n                </View>\r\n            </Modal>\r\n            <ScrollView>\r\n            <View style={styles.container}>\r\n                <Text style={styles.textHeader} >Pay Dues</Text>\r\n                <Text style={styles.textSubHeader} >Easily pay your outstanding dues online with our convenient and secure payment platform.</Text>\r\n                <Text>{itemPrice}</Text>\r\n                <View>\r\n                    <Text style={styles.textLabel}>Item Name</Text>\r\n                    <TextInput defaultValue={nameProp} style={styles.textInput}  placeholder='Enter item name'></TextInput>\r\n                    <Text style={styles.textLabel}>Item Price</Text>\r\n                    <TextInput defaultValue={priceProp} keyboardType={'numeric'} style={styles.textInput}  placeholder='Enter amount to be paid'></TextInput>\r\n                    <Text style={styles.textLabel}>Required Collectible</Text>\r\n                    <TextInput onChangeText={(e)=> setrequiredCollectible(parseInt(e))} style={styles.textInput} editable={false} value='2500'></TextInput>\r\n                    <Text style={styles.textLabel}>Reference Number</Text>\r\n                    <TextInput onChangeText={(e)=> setreferenceNumber(parseInt(e))} style={styles.textInput} placeholder='Enter reference Number here'></TextInput>\r\n                    <Text style={styles.textLabel}>Type of Payment</Text>\r\n                    \r\n                    <Picker mode='dropdown'style={styles.d1} >\r\n                            <Picker.Item label='Bank' value={'Bank'}/> \r\n                            <Picker.Item label='Cash' value={'Cash'}/> \r\n                            <Picker.Item label='Over the Counter' value={'Over the Counter'}/> \r\n                    </Picker>   \r\n\r\n                    <View style={styles.buttonContainer}>\r\n                        <Pressable style={styles.button} onPressIn={()=>navigation.navigate('CameraShot',{nameprop:nameProp, priceprop:priceProp, contractId:contractIdProp})}>\r\n                        <Text style={styles.buttonLabel}>\r\n                            Take picture\r\n                        </Text>\r\n                        </Pressable>\r\n                     \r\n                    </View>\r\n                    <View style={styles.buttonContainer}>\r\n                    <Pressable style={styles.button} onPressIn={handleUpload}>\r\n                        <Text style={styles.buttonLabel}>\r\n                            Continue\r\n                        </Text>\r\n                        </Pressable>\r\n                    </View>\r\n                </View>\r\n            </View>    \r\n            </ScrollView>     \r\n        </SafeAreaView>\r\n\r\n    );\r\n\r\n        let base64Image = \"\";\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    container:{\r\n        paddingTop: 120, \r\n        paddingHorizontal: 21\r\n    }, \r\n    textHeader:{\r\n        fontSize: 32,\r\n        fontWeight: 'bold', \r\n        color: '#203949',\r\n        paddingHorizontal: 15,\r\n        \r\n    },\r\n    textSubHeader:{\r\n        fontSize: 18,\r\n        color: '#203949',\r\n        paddingHorizontal: 15,\r\n        paddingVertical: 10,\r\n        marginBottom: 10,\r\n    },\r\n    textLabel:{\r\n        paddingTop: 15,\r\n        fontSize: 15,\r\n        paddingHorizontal: 15,\r\n        marginVertical: 5\r\n    },\r\n    textInput:{\r\n        fontSize: 17,\r\n        paddingHorizontal: 15,\r\n        marginHorizontal: 15,\r\n        marginVertical: 5,\r\n        borderColor: \"#523009\",\r\n        borderWidth: .5,\r\n\r\n    },\r\n    buttonContainer: {\r\n        padding: 5,\r\n        height: 50,\r\n        backgroundColor:'#2C85E7',\r\n        marginLeft: 10,\r\n        justifyContent:'space-evenly',\r\n        borderRadius: 5,\r\n        width: '50%',\r\n        alignSelf:'center',\r\n        margin: 7\r\n    }, \r\n    button:{\r\n        borderRadius: 10 ,\r\n        width: '100%', \r\n        height: '100%', \r\n        alignItems: 'center', \r\n        justifyContent: 'center', \r\n        flexDirection: 'row'\r\n    },\r\n    buttonLabel:{\r\n        color: '#fff', \r\n        fontSize: 12\r\n    },\r\n    d1:{\r\n        height: 40,\r\n        borderRadius: 5,\r\n        width: '50%'\r\n    },\r\n    modalButtonConfirmation:{\r\n        marginTop: hp(2), \r\n        backgroundColor: '#2C85E7',\r\n        width: wp(35),\r\n        height: hp(6.5),\r\n        alignItems: 'center', \r\n        justifyContent: 'center', \r\n        borderRadius: 5, \r\n    }, \r\n    modalView: {\r\n        alignItems: 'center', \r\n        justifyContent: 'center', \r\n        margin: hp(5),\r\n        backgroundColor: 'white',\r\n        borderRadius: 20,\r\n        padding: hp(5),\r\n        shadowColor: '#000',\r\n        shadowOffset: {\r\n          width: 0,\r\n          height: 2,\r\n        },\r\n        shadowOpacity: 0.25,\r\n        shadowRadius: 4,\r\n        elevation: 5,\r\n      },\r\n\r\n});\r\n    \r\n\r\n\r\n\r\n/*\r\n                    <View style={styles.buttonContainer}>\r\n\r\n                    <Pressable onPress={()=>navigation.push('CameraCapture')}>\r\n                        <Text style={styles.buttonLabel}>take picture</Text>\r\n                    </Pressable>\r\n                    </View>\r\n\r\n*/\r\n\r\n/*\r\n                    <select\r\n                      value={paymentType} onChange={(event) => setpaymentType(event.target.value)} defaultValue={'Select type of Payment'}\r\n                      style={{ height: '35px', width: '120px', borderRadius: '8px', textAlign: 'center', backgroundColor: '#D9D9D9' }}\r\n                    >\r\n                      <option value=\"Cash\">Cash</option>\r\n                      <option value=\"Online Banking\">Online Banking</option>\r\n                      <option value=\"Over the Counter\">Over the Counter</option>\r\n                    </select>\r\n                    \r\n\r\n*/"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}