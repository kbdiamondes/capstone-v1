{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport EXPO_ROUTER_IMPORT_MODE from \"./import-mode\";\nimport { getNameFromFilePath, matchDeepDynamicRouteName, matchDynamicName, matchGroupName, removeSupportedExtensions, stripGroupSegmentsFromPath, stripInvisibleSegmentsFromPath } from \"./matchers\";\nexport function getRecursiveTree(files) {\n  var tree = {\n    name: \"\",\n    children: [],\n    parents: [],\n    node: null\n  };\n  for (var file of files) {\n    var parts = file.normalizedName.split(\"/\");\n    var currentNode = tree;\n    var _loop = function _loop() {\n      var part = parts[i];\n      if (i === parts.length - 1 && part === \"_layout\") {\n        if (currentNode.node) {\n          var overwritten = currentNode.node.contextKey;\n          throw new Error(`Higher priority Layout Route \"${file.contextKey}\" overriding redundant Layout Route \"${overwritten}\". Remove the Layout Route \"${overwritten}\" to fix this.`);\n        }\n        return \"continue\";\n      }\n      var existing = currentNode.children.find(function (item) {\n        return item.name === part;\n      });\n      if (existing) {\n        currentNode = existing;\n      } else {\n        var newNode = {\n          name: part,\n          children: [],\n          parents: [].concat(_toConsumableArray(currentNode.parents), [currentNode.name]),\n          node: null\n        };\n        currentNode.children.push(newNode);\n        currentNode = newNode;\n      }\n    };\n    for (var i = 0; i < parts.length; i++) {\n      var _ret = _loop();\n      if (_ret === \"continue\") continue;\n    }\n    currentNode.node = file;\n  }\n  if (process.env.NODE_ENV !== \"production\") {\n    assertDeprecatedFormat(tree);\n  }\n  return tree;\n}\nfunction assertDeprecatedFormat(tree) {\n  for (var child of tree.children) {\n    if (child.node && child.children.length && !child.node.normalizedName.endsWith(\"_layout\")) {\n      var ext = child.node.contextKey.split(\".\").pop();\n      throw new Error(`Using deprecated Layout Route format: Move \\`./app/${child.node.normalizedName}.${ext}\\` to \\`./app/${child.node.normalizedName}/_layout.${ext}\\``);\n    }\n    assertDeprecatedFormat(child);\n  }\n}\nfunction getTreeNodesAsRouteNodes(nodes) {\n  return nodes.map(function (node) {\n    return treeNodeToRouteNode(node);\n  }).flat().filter(Boolean);\n}\nexport function generateDynamicFromSegment(name) {\n  var deepDynamicName = matchDeepDynamicRouteName(name);\n  var dynamicName = deepDynamicName != null ? deepDynamicName : matchDynamicName(name);\n  return dynamicName ? {\n    name: dynamicName,\n    deep: !!deepDynamicName\n  } : null;\n}\nexport function generateDynamic(name) {\n  var description = name.split(\"/\").map(function (segment) {\n    return generateDynamicFromSegment(segment);\n  }).filter(Boolean);\n  return description.length === 0 ? null : description;\n}\nfunction collapseRouteSegments(route) {\n  return stripGroupSegmentsFromPath(route.replace(/\\/index$/, \"\"));\n}\nfunction getDefaultInitialRoute(node, name) {\n  return node.children.find(function (node) {\n    return collapseRouteSegments(node.route) === name;\n  });\n}\nfunction applyDefaultInitialRouteName(node) {\n  var _node$children, _getDefaultInitialRou;\n  var groupName = matchGroupName(node.route);\n  if (!((_node$children = node.children) != null && _node$children.length)) {\n    return node;\n  }\n  var initialRouteName = groupName ? (_getDefaultInitialRou = getDefaultInitialRoute(node, groupName)) == null ? void 0 : _getDefaultInitialRou.route : undefined;\n  var loaded = node.loadRoute();\n  if (loaded != null && loaded.unstable_settings) {\n    var _loaded$unstable_sett;\n    initialRouteName = (_loaded$unstable_sett = loaded.unstable_settings.initialRouteName) != null ? _loaded$unstable_sett : initialRouteName;\n    if (groupName) {\n      var _loaded$unstable_sett2, _loaded$unstable_sett3;\n      var groupSpecificInitialRouteName = (_loaded$unstable_sett2 = loaded.unstable_settings) == null ? void 0 : (_loaded$unstable_sett3 = _loaded$unstable_sett2[groupName]) == null ? void 0 : _loaded$unstable_sett3.initialRouteName;\n      initialRouteName = groupSpecificInitialRouteName != null ? groupSpecificInitialRouteName : initialRouteName;\n    }\n  }\n  return _objectSpread(_objectSpread({}, node), {}, {\n    initialRouteName: initialRouteName\n  });\n}\nfunction cloneGroupRoute(node, _ref) {\n  var nextName = _ref.name;\n  var groupName = `(${nextName})`;\n  var parts = node.contextKey.split(\"/\");\n  parts[parts.length - 2] = groupName;\n  return _objectSpread(_objectSpread({}, node), {}, {\n    route: groupName,\n    contextKey: parts.join(\"/\")\n  });\n}\nfunction folderNodeToRouteNode(_ref2) {\n  var name = _ref2.name,\n    children = _ref2.children;\n  if (!children.length) {\n    return null;\n  }\n  return getTreeNodesAsRouteNodes(children.map(function (child) {\n    return _objectSpread(_objectSpread({}, child), {}, {\n      name: [name, child.name].filter(Boolean).join(\"/\")\n    });\n  }));\n}\nfunction fileNodeToRouteNode(tree) {\n  var name = tree.name,\n    node = tree.node,\n    children = tree.children;\n  if (!node) throw new Error(\"node must be defined\");\n  var dynamic = generateDynamic(name);\n  var groupName = matchGroupName(name);\n  var multiGroup = groupName == null ? void 0 : groupName.includes(\",\");\n  var clones = multiGroup ? groupName.split(\",\").map(function (v) {\n    return {\n      name: v.trim()\n    };\n  }) : null;\n  if (clones) {\n    var names = new Set();\n    for (var clone of clones) {\n      if (names.has(clone.name)) {\n        throw new Error(`Array syntax cannot contain duplicate group name \"${clone.name}\" in \"${node.contextKey}\".`);\n      }\n      names.add(clone.name);\n    }\n  }\n  var output = {\n    loadRoute: node.loadRoute,\n    route: name,\n    contextKey: node.contextKey,\n    children: getTreeNodesAsRouteNodes(children),\n    dynamic: dynamic\n  };\n  if (Array.isArray(clones)) {\n    return clones.map(function (clone) {\n      return applyDefaultInitialRouteName(cloneGroupRoute(_objectSpread({}, output), clone));\n    });\n  }\n  return [applyDefaultInitialRouteName({\n    loadRoute: node.loadRoute,\n    route: name,\n    contextKey: node.contextKey,\n    children: getTreeNodesAsRouteNodes(children),\n    dynamic: dynamic\n  })];\n}\nfunction treeNodeToRouteNode(tree) {\n  if (tree.node) {\n    return fileNodeToRouteNode(tree);\n  }\n  return folderNodeToRouteNode(tree);\n}\nfunction contextModuleToFileNodes(contextModule) {\n  var files = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : contextModule.keys();\n  var nodes = files.map(function (key) {\n    try {\n      if (process.env.NODE_ENV === \"development\") {\n        if (EXPO_ROUTER_IMPORT_MODE === \"sync\") {\n          var _contextModule;\n          if (!((_contextModule = contextModule(key)) != null && _contextModule.default)) {\n            return null;\n          }\n        }\n      }\n      var node = {\n        loadRoute: function loadRoute() {\n          return contextModule(key);\n        },\n        normalizedName: getNameFromFilePath(key),\n        contextKey: key\n      };\n      return node;\n    } catch (error) {\n      console.warn('Error loading route \"' + key + '\"', error);\n    }\n    return null;\n  });\n  return nodes.filter(Boolean);\n}\nfunction hasCustomRootLayoutNode(routes) {\n  if (routes.length !== 1) {\n    return false;\n  }\n  var route = routes[0];\n  if (route.route === \"\" && route.contextKey.match(/^\\.\\/_layout\\.([jt]sx?)$/)) {\n    return true;\n  }\n  return false;\n}\nfunction treeNodesToRootRoute(treeNode) {\n  var routes = treeNodeToRouteNode(treeNode);\n  return withOptionalRootLayout(routes);\n}\nfunction processKeys(files, options) {\n  var ignore = options.ignore;\n  return files.filter(function (file) {\n    return !(ignore != null && ignore.some(function (pattern) {\n      return pattern.test(file);\n    }));\n  });\n}\nexport function assertDuplicateRoutes(filenames) {\n  if (process.env.NODE_ENV === \"production\") {\n    return;\n  }\n  var duplicates = filenames.map(function (filename) {\n    return removeSupportedExtensions(filename);\n  }).reduce(function (acc, filename) {\n    acc[filename] = acc[filename] ? acc[filename] + 1 : 1;\n    return acc;\n  }, {});\n  Object.entries(duplicates).forEach(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      filename = _ref4[0],\n      count = _ref4[1];\n    if (count > 1) {\n      throw new Error(`Multiple files match the route name \"${filename}\".`);\n    }\n  });\n}\nexport function getRoutes(contextModule, options) {\n  var route = getExactRoutes(contextModule, options);\n  if (!route) {\n    return null;\n  }\n  appendSitemapRoute(route);\n  appendUnmatchedRoute(route);\n  return route;\n}\nexport function getRoutesAsync(_x, _x2) {\n  return _getRoutesAsync.apply(this, arguments);\n}\nfunction _getRoutesAsync() {\n  _getRoutesAsync = _asyncToGenerator(function* (contextModule, options) {\n    var route = yield getExactRoutesAsync(contextModule, options);\n    if (!route) {\n      return null;\n    }\n    appendSitemapRoute(route);\n    appendUnmatchedRoute(route);\n    return route;\n  });\n  return _getRoutesAsync.apply(this, arguments);\n}\nfunction getIgnoreList(options) {\n  var _options$ignore;\n  var ignore = [/^\\.\\/\\+html\\.[tj]sx?$/].concat(_toConsumableArray((_options$ignore = options == null ? void 0 : options.ignore) != null ? _options$ignore : []));\n  return ignore;\n}\nexport function getExactRoutes(contextModule, options) {\n  var treeNodes = contextModuleToTree(contextModule, options);\n  var route = treeNodesToRootRoute(treeNodes);\n  return route || null;\n}\nfunction contextModuleToTree(contextModule, options) {\n  var allowed = processKeys(contextModule.keys(), _objectSpread(_objectSpread({}, options), {}, {\n    ignore: getIgnoreList(options)\n  }));\n  assertDuplicateRoutes(allowed);\n  var files = contextModuleToFileNodes(contextModule, allowed);\n  return getRecursiveTree(files);\n}\nexport function getExactRoutesAsync(_x3, _x4) {\n  return _getExactRoutesAsync.apply(this, arguments);\n}\nfunction _getExactRoutesAsync() {\n  _getExactRoutesAsync = _asyncToGenerator(function* (contextModule, options) {\n    var treeNodes = contextModuleToTree(contextModule, options);\n    var route = treeNodesToRootRoute(treeNodes);\n    return route || null;\n  });\n  return _getExactRoutesAsync.apply(this, arguments);\n}\nfunction appendSitemapRoute(routes) {\n  if (!routes.children.length || routes.children.some(function (route) {\n    return route.route === \"_sitemap\";\n  })) {\n    return routes;\n  }\n  var _require = require(\"./views/Sitemap\"),\n    Sitemap = _require.Sitemap,\n    getNavOptions = _require.getNavOptions;\n  routes.children.push({\n    loadRoute: function loadRoute() {\n      return {\n        default: Sitemap,\n        getNavOptions: getNavOptions\n      };\n    },\n    route: \"_sitemap\",\n    contextKey: \"./_sitemap.tsx\",\n    generated: true,\n    internal: true,\n    dynamic: null,\n    children: []\n  });\n  return routes;\n}\nfunction appendUnmatchedRoute(routes) {\n  var userDefinedDynamicRoute = getUserDefinedDeepDynamicRoute(routes);\n  if (!userDefinedDynamicRoute) {\n    routes.children.push({\n      loadRoute: function loadRoute() {\n        return {\n          default: require(\"./views/Unmatched\").Unmatched\n        };\n      },\n      route: \"[...404]\",\n      contextKey: \"./[...404].tsx\",\n      dynamic: [{\n        name: \"404\",\n        deep: true\n      }],\n      children: [],\n      generated: true,\n      internal: true\n    });\n  }\n  return routes;\n}\nexport function getUserDefinedDeepDynamicRoute(routes) {\n  for (var route of (_routes$children = routes.children) != null ? _routes$children : []) {\n    var _routes$children;\n    if (route.generated) continue;\n    var opaqueRoute = stripInvisibleSegmentsFromPath(route.route);\n    var isDeepDynamic = matchDeepDynamicRouteName(opaqueRoute);\n    if (isDeepDynamic) {\n      return route;\n    }\n    if (matchGroupName(route.route)) {\n      var child = getUserDefinedDeepDynamicRoute(route);\n      if (child) {\n        return child;\n      }\n    }\n  }\n  return null;\n}\nfunction withOptionalRootLayout(routes) {\n  if (!(routes != null && routes.length)) {\n    return null;\n  }\n  if (hasCustomRootLayoutNode(routes)) {\n    return routes[0];\n  }\n  return {\n    loadRoute: function loadRoute() {\n      return {\n        default: require(\"./views/Navigator\").DefaultNavigator\n      };\n    },\n    contextKey: \"./_layout.tsx\",\n    route: \"\",\n    generated: true,\n    dynamic: null,\n    children: routes\n  };\n}","map":{"version":3,"names":["EXPO_ROUTER_IMPORT_MODE","getNameFromFilePath","matchDeepDynamicRouteName","matchDynamicName","matchGroupName","removeSupportedExtensions","stripGroupSegmentsFromPath","stripInvisibleSegmentsFromPath","getRecursiveTree","files","tree","name","children","parents","node","file","parts","normalizedName","split","currentNode","_loop","part","i","length","overwritten","contextKey","Error","existing","find","item","newNode","concat","_toConsumableArray","push","_ret","process","env","NODE_ENV","assertDeprecatedFormat","child","endsWith","ext","pop","getTreeNodesAsRouteNodes","nodes","map","treeNodeToRouteNode","flat","filter","Boolean","generateDynamicFromSegment","deepDynamicName","dynamicName","deep","generateDynamic","description","segment","collapseRouteSegments","route","replace","getDefaultInitialRoute","applyDefaultInitialRouteName","_node$children","_getDefaultInitialRou","groupName","initialRouteName","undefined","loaded","loadRoute","unstable_settings","_loaded$unstable_sett","_loaded$unstable_sett2","_loaded$unstable_sett3","groupSpecificInitialRouteName","_objectSpread","cloneGroupRoute","_ref","nextName","join","folderNodeToRouteNode","_ref2","fileNodeToRouteNode","dynamic","multiGroup","includes","clones","v","trim","names","Set","clone","has","add","output","Array","isArray","contextModuleToFileNodes","contextModule","arguments","keys","key","_contextModule","default","error","console","warn","hasCustomRootLayoutNode","routes","match","treeNodesToRootRoute","treeNode","withOptionalRootLayout","processKeys","options","ignore","some","pattern","test","assertDuplicateRoutes","filenames","duplicates","filename","reduce","acc","Object","entries","forEach","_ref3","_ref4","_slicedToArray","count","getRoutes","getExactRoutes","appendSitemapRoute","appendUnmatchedRoute","getRoutesAsync","_x","_x2","_getRoutesAsync","apply","_asyncToGenerator","getExactRoutesAsync","getIgnoreList","_options$ignore","treeNodes","contextModuleToTree","allowed","_x3","_x4","_getExactRoutesAsync","_require","require","Sitemap","getNavOptions","generated","internal","userDefinedDynamicRoute","getUserDefinedDeepDynamicRoute","Unmatched","_routes$children","opaqueRoute","isDeepDynamic","DefaultNavigator"],"sources":["C:/Users/User/Documents/GitHub/Capstone/collectify/collectify-front-end/node_modules/expo-router/src/getRoutes.ts"],"sourcesContent":["import type { DynamicConvention, RouteNode } from \"./Route\";\r\nimport EXPO_ROUTER_IMPORT_MODE from \"./import-mode\";\r\nimport {\r\n  getNameFromFilePath,\r\n  matchDeepDynamicRouteName,\r\n  matchDynamicName,\r\n  matchGroupName,\r\n  removeSupportedExtensions,\r\n  stripGroupSegmentsFromPath,\r\n  stripInvisibleSegmentsFromPath,\r\n} from \"./matchers\";\r\nimport type { RequireContext } from \"./types\";\r\n\r\nexport type FileNode = Pick<RouteNode, \"contextKey\" | \"loadRoute\"> & {\r\n  /** Like `(tab)/index` */\r\n  normalizedName: string;\r\n};\r\n\r\ntype TreeNode = {\r\n  name: string;\r\n  children: TreeNode[];\r\n  parents: string[];\r\n  /** null when there is no file in a folder. */\r\n  node: FileNode | null;\r\n};\r\n\r\ntype Options = {\r\n  ignore?: RegExp[];\r\n};\r\n\r\n/** Convert a flat map of file nodes into a nested tree of files. */\r\nexport function getRecursiveTree(files: FileNode[]): TreeNode {\r\n  const tree = {\r\n    name: \"\",\r\n    children: [],\r\n    parents: [],\r\n    node: null,\r\n  };\r\n\r\n  for (const file of files) {\r\n    // ['(tab)', 'settings', '[...another]']\r\n    const parts = file.normalizedName.split(\"/\");\r\n    let currentNode: TreeNode = tree;\r\n    for (let i = 0; i < parts.length; i++) {\r\n      const part = parts[i];\r\n\r\n      if (i === parts.length - 1 && part === \"_layout\") {\r\n        if (currentNode.node) {\r\n          const overwritten = currentNode.node.contextKey;\r\n          throw new Error(\r\n            `Higher priority Layout Route \"${file.contextKey}\" overriding redundant Layout Route \"${overwritten}\". Remove the Layout Route \"${overwritten}\" to fix this.`\r\n          );\r\n        }\r\n        continue;\r\n      }\r\n\r\n      const existing = currentNode.children.find((item) => item.name === part);\r\n      if (existing) {\r\n        currentNode = existing;\r\n      } else {\r\n        const newNode: TreeNode = {\r\n          name: part,\r\n          children: [],\r\n          parents: [...currentNode.parents, currentNode.name],\r\n          node: null,\r\n        };\r\n        currentNode.children.push(newNode);\r\n        currentNode = newNode;\r\n      }\r\n    }\r\n    currentNode.node = file;\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== \"production\") {\r\n    assertDeprecatedFormat(tree);\r\n  }\r\n\r\n  return tree;\r\n}\r\n\r\nfunction assertDeprecatedFormat(tree: TreeNode) {\r\n  for (const child of tree.children) {\r\n    if (\r\n      child.node &&\r\n      child.children.length &&\r\n      !child.node.normalizedName.endsWith(\"_layout\")\r\n    ) {\r\n      const ext = child.node.contextKey.split(\".\").pop();\r\n      throw new Error(\r\n        `Using deprecated Layout Route format: Move \\`./app/${child.node.normalizedName}.${ext}\\` to \\`./app/${child.node.normalizedName}/_layout.${ext}\\``\r\n      );\r\n    }\r\n    assertDeprecatedFormat(child);\r\n  }\r\n}\r\n\r\nfunction getTreeNodesAsRouteNodes(nodes: TreeNode[]): RouteNode[] {\r\n  return nodes\r\n    .map((node) => treeNodeToRouteNode(node))\r\n    .flat()\r\n    .filter(Boolean) as RouteNode[];\r\n}\r\n\r\nexport function generateDynamicFromSegment(\r\n  name: string\r\n): DynamicConvention | null {\r\n  const deepDynamicName = matchDeepDynamicRouteName(name);\r\n  const dynamicName = deepDynamicName ?? matchDynamicName(name);\r\n\r\n  return dynamicName ? { name: dynamicName, deep: !!deepDynamicName } : null;\r\n}\r\n\r\nexport function generateDynamic(name: string): RouteNode[\"dynamic\"] {\r\n  const description = name\r\n    .split(\"/\")\r\n    .map((segment) => generateDynamicFromSegment(segment))\r\n    .filter(Boolean) as DynamicConvention[];\r\n  return description.length === 0 ? null : description;\r\n}\r\n\r\nfunction collapseRouteSegments(route: string) {\r\n  return stripGroupSegmentsFromPath(route.replace(/\\/index$/, \"\"));\r\n}\r\n\r\n/**\r\n * Given a route node and a name representing the group name,\r\n * find the nearest child matching the name.\r\n *\r\n * Doesn't support slashes in the name.\r\n * Routes like `explore/(something)/index` will be matched against `explore`.\r\n *\r\n */\r\nfunction getDefaultInitialRoute(node: RouteNode, name: string) {\r\n  return node.children.find(\r\n    (node) => collapseRouteSegments(node.route) === name\r\n  );\r\n}\r\n\r\nfunction applyDefaultInitialRouteName(node: RouteNode): RouteNode {\r\n  const groupName = matchGroupName(node.route);\r\n  if (!node.children?.length) {\r\n    return node;\r\n  }\r\n\r\n  // Guess at the initial route based on the group name.\r\n  // TODO(EvanBacon): Perhaps we should attempt to warn when the group doesn't match any child routes.\r\n  let initialRouteName = groupName\r\n    ? getDefaultInitialRoute(node, groupName)?.route\r\n    : undefined;\r\n  const loaded = node.loadRoute();\r\n\r\n  if (loaded?.unstable_settings) {\r\n    // Allow unstable_settings={ initialRouteName: '...' } to override the default initial route name.\r\n    initialRouteName =\r\n      loaded.unstable_settings.initialRouteName ?? initialRouteName;\r\n\r\n    if (groupName) {\r\n      // Allow unstable_settings={ 'custom': { initialRouteName: '...' } } to override the less specific initial route name.\r\n      const groupSpecificInitialRouteName =\r\n        loaded.unstable_settings?.[groupName]?.initialRouteName;\r\n\r\n      initialRouteName = groupSpecificInitialRouteName ?? initialRouteName;\r\n    }\r\n  }\r\n\r\n  return {\r\n    ...node,\r\n    initialRouteName,\r\n  };\r\n}\r\n\r\nfunction cloneGroupRoute(\r\n  node: RouteNode,\r\n  { name: nextName }: { name: string }\r\n): RouteNode {\r\n  const groupName = `(${nextName})`;\r\n  const parts = node.contextKey.split(\"/\");\r\n  parts[parts.length - 2] = groupName;\r\n\r\n  return {\r\n    ...node,\r\n    route: groupName,\r\n    contextKey: parts.join(\"/\"),\r\n  };\r\n}\r\n\r\nfunction folderNodeToRouteNode({\r\n  name,\r\n  children,\r\n}: TreeNode): RouteNode[] | null {\r\n  // Empty folder, skip it.\r\n  if (!children.length) {\r\n    return null;\r\n  }\r\n\r\n  // When there's a directory, but no layout route file (with valid export), the child routes won't be grouped.\r\n  // This pushes all children into the nearest layout route.\r\n  return getTreeNodesAsRouteNodes(\r\n    children.map((child) => {\r\n      return {\r\n        ...child,\r\n        name: [name, child.name].filter(Boolean).join(\"/\"),\r\n      };\r\n    })\r\n  );\r\n}\r\n\r\nfunction fileNodeToRouteNode(tree: TreeNode): RouteNode[] | null {\r\n  const { name, node, children } = tree;\r\n\r\n  if (!node) throw new Error(\"node must be defined\");\r\n\r\n  const dynamic = generateDynamic(name);\r\n\r\n  const groupName = matchGroupName(name);\r\n  const multiGroup = groupName?.includes(\",\");\r\n\r\n  const clones = multiGroup\r\n    ? groupName!.split(\",\").map((v) => ({ name: v.trim() }))\r\n    : null;\r\n\r\n  // Assert duplicates:\r\n  if (clones) {\r\n    const names = new Set<string>();\r\n    for (const clone of clones) {\r\n      if (names.has(clone.name)) {\r\n        throw new Error(\r\n          `Array syntax cannot contain duplicate group name \"${clone.name}\" in \"${node.contextKey}\".`\r\n        );\r\n      }\r\n      names.add(clone.name);\r\n    }\r\n  }\r\n\r\n  const output = {\r\n    loadRoute: node.loadRoute,\r\n    route: name,\r\n    contextKey: node.contextKey,\r\n    children: getTreeNodesAsRouteNodes(children),\r\n    dynamic,\r\n  };\r\n\r\n  if (Array.isArray(clones)) {\r\n    return clones.map((clone) =>\r\n      applyDefaultInitialRouteName(cloneGroupRoute({ ...output }, clone))\r\n    );\r\n  }\r\n\r\n  return [\r\n    applyDefaultInitialRouteName({\r\n      loadRoute: node.loadRoute,\r\n      route: name,\r\n      contextKey: node.contextKey,\r\n      children: getTreeNodesAsRouteNodes(children),\r\n      dynamic,\r\n    }),\r\n  ];\r\n}\r\n\r\nfunction treeNodeToRouteNode(tree: TreeNode): RouteNode[] | null {\r\n  if (tree.node) {\r\n    return fileNodeToRouteNode(tree);\r\n  }\r\n\r\n  return folderNodeToRouteNode(tree);\r\n}\r\n\r\nfunction contextModuleToFileNodes(\r\n  contextModule: RequireContext,\r\n  files: string[] = contextModule.keys()\r\n): FileNode[] {\r\n  const nodes = files.map((key) => {\r\n    // In development, check if the file exports a default component\r\n    // this helps keep things snappy when creating files. In production we load all screens lazily.\r\n    try {\r\n      if (process.env.NODE_ENV === \"development\") {\r\n        // If the user has set the `EXPO_ROUTER_IMPORT_MODE` to `sync` then we should\r\n        // filter the missing routes.\r\n        if (EXPO_ROUTER_IMPORT_MODE === \"sync\") {\r\n          if (!contextModule(key)?.default) {\r\n            return null;\r\n          }\r\n        }\r\n      }\r\n      const node: FileNode = {\r\n        loadRoute() {\r\n          return contextModule(key);\r\n        },\r\n        normalizedName: getNameFromFilePath(key),\r\n        contextKey: key,\r\n      };\r\n\r\n      return node;\r\n    } catch (error) {\r\n      // Probably this won't stop metro from freaking out but it's worth a try.\r\n      console.warn('Error loading route \"' + key + '\"', error);\r\n    }\r\n    return null;\r\n  });\r\n\r\n  return nodes.filter(Boolean) as FileNode[];\r\n}\r\n\r\nfunction hasCustomRootLayoutNode(routes: RouteNode[]) {\r\n  if (routes.length !== 1) {\r\n    return false;\r\n  }\r\n  // This could either be the root _layout or an app with a single file.\r\n  const route = routes[0];\r\n\r\n  if (\r\n    route.route === \"\" &&\r\n    route.contextKey.match(/^\\.\\/_layout\\.([jt]sx?)$/)\r\n  ) {\r\n    return true;\r\n  }\r\n  return false;\r\n}\r\n\r\nfunction treeNodesToRootRoute(treeNode: TreeNode): RouteNode | null {\r\n  const routes = treeNodeToRouteNode(treeNode);\r\n  return withOptionalRootLayout(routes);\r\n}\r\n\r\nfunction processKeys(files: string[], options: Options): string[] {\r\n  const { ignore } = options;\r\n\r\n  return files.filter((file) => {\r\n    return !ignore?.some((pattern) => pattern.test(file));\r\n  });\r\n}\r\n\r\n/**\r\n * Asserts if the require.context has files that share the same name but have different extensions. Exposed for testing.\r\n * @private\r\n */\r\nexport function assertDuplicateRoutes(filenames: string[]) {\r\n  if (process.env.NODE_ENV === \"production\") {\r\n    return;\r\n  }\r\n\r\n  const duplicates = filenames\r\n    .map((filename) => removeSupportedExtensions(filename))\r\n    .reduce((acc, filename) => {\r\n      acc[filename] = acc[filename] ? acc[filename] + 1 : 1;\r\n      return acc;\r\n    }, {} as Record<string, number>);\r\n\r\n  Object.entries(duplicates).forEach(([filename, count]) => {\r\n    if (count > 1) {\r\n      throw new Error(`Multiple files match the route name \"${filename}\".`);\r\n    }\r\n  });\r\n}\r\n\r\n/** Given a Metro context module, return an array of nested routes. */\r\nexport function getRoutes(\r\n  contextModule: RequireContext,\r\n  options?: Options\r\n): RouteNode | null {\r\n  const route = getExactRoutes(contextModule, options);\r\n\r\n  // If there is no route, return an empty route.\r\n  if (!route) {\r\n    return null;\r\n  }\r\n\r\n  appendSitemapRoute(route);\r\n\r\n  // Auto add not found route if it doesn't exist\r\n  appendUnmatchedRoute(route);\r\n\r\n  return route;\r\n}\r\n\r\nexport async function getRoutesAsync(\r\n  contextModule: RequireContext,\r\n  options?: Options\r\n): Promise<RouteNode | null> {\r\n  const route = await getExactRoutesAsync(contextModule, options);\r\n  if (!route) {\r\n    return null;\r\n  }\r\n\r\n  appendSitemapRoute(route);\r\n\r\n  // Auto add not found route if it doesn't exist\r\n  appendUnmatchedRoute(route);\r\n\r\n  return route;\r\n}\r\n\r\nfunction getIgnoreList(options?: Options) {\r\n  const ignore: RegExp[] = [\r\n    /^\\.\\/\\+html\\.[tj]sx?$/,\r\n    ...(options?.ignore ?? []),\r\n  ];\r\n  return ignore;\r\n}\r\n\r\n/** Get routes without unmatched or sitemap. */\r\nexport function getExactRoutes(\r\n  contextModule: RequireContext,\r\n  options?: Options\r\n): RouteNode | null {\r\n  const treeNodes = contextModuleToTree(contextModule, options);\r\n  const route = treeNodesToRootRoute(treeNodes);\r\n  return route || null;\r\n}\r\n\r\nfunction contextModuleToTree(contextModule: RequireContext, options?: Options) {\r\n  const allowed = processKeys(contextModule.keys(), {\r\n    ...options,\r\n    ignore: getIgnoreList(options),\r\n  });\r\n  assertDuplicateRoutes(allowed);\r\n  const files = contextModuleToFileNodes(contextModule, allowed);\r\n  return getRecursiveTree(files);\r\n}\r\n\r\nexport async function getExactRoutesAsync(\r\n  contextModule: RequireContext,\r\n  options?: Options\r\n): Promise<RouteNode | null> {\r\n  const treeNodes = contextModuleToTree(contextModule, options);\r\n  const route = treeNodesToRootRoute(treeNodes);\r\n  return route || null;\r\n}\r\n\r\nfunction appendSitemapRoute(routes: RouteNode) {\r\n  if (\r\n    !routes.children.length ||\r\n    // Allow overriding the sitemap route\r\n    routes.children.some((route) => route.route === \"_sitemap\")\r\n  ) {\r\n    return routes;\r\n  }\r\n  const { Sitemap, getNavOptions } = require(\"./views/Sitemap\");\r\n  routes.children.push({\r\n    loadRoute() {\r\n      return { default: Sitemap, getNavOptions };\r\n    },\r\n    route: \"_sitemap\",\r\n    contextKey: \"./_sitemap.tsx\",\r\n    generated: true,\r\n    internal: true,\r\n    dynamic: null,\r\n    children: [],\r\n  });\r\n  return routes;\r\n}\r\n\r\nfunction appendUnmatchedRoute(routes: RouteNode) {\r\n  // Auto add not found route if it doesn't exist\r\n  const userDefinedDynamicRoute = getUserDefinedDeepDynamicRoute(routes);\r\n  if (!userDefinedDynamicRoute) {\r\n    routes.children.push({\r\n      loadRoute() {\r\n        return { default: require(\"./views/Unmatched\").Unmatched };\r\n      },\r\n      route: \"[...404]\",\r\n      contextKey: \"./[...404].tsx\",\r\n      dynamic: [{ name: \"404\", deep: true }],\r\n      children: [],\r\n      generated: true,\r\n      internal: true,\r\n    });\r\n  }\r\n  return routes;\r\n}\r\n\r\n/**\r\n * Exposed for testing.\r\n * @returns a top-level deep dynamic route if it exists, otherwise null.\r\n */\r\nexport function getUserDefinedDeepDynamicRoute(\r\n  routes: RouteNode\r\n): RouteNode | null {\r\n  // Auto add not found route if it doesn't exist\r\n  for (const route of routes.children ?? []) {\r\n    if (route.generated) continue;\r\n    const opaqueRoute = stripInvisibleSegmentsFromPath(route.route);\r\n    const isDeepDynamic = matchDeepDynamicRouteName(opaqueRoute);\r\n    if (isDeepDynamic) {\r\n      return route;\r\n    }\r\n    // Recurse through group routes\r\n    if (matchGroupName(route.route)) {\r\n      const child = getUserDefinedDeepDynamicRoute(route);\r\n      if (child) {\r\n        return child;\r\n      }\r\n    }\r\n  }\r\n  return null;\r\n}\r\n\r\nfunction withOptionalRootLayout(routes: RouteNode[] | null): RouteNode | null {\r\n  if (!routes?.length) {\r\n    return null;\r\n  }\r\n\r\n  if (hasCustomRootLayoutNode(routes)) {\r\n    return routes[0];\r\n  }\r\n\r\n  return {\r\n    loadRoute: () => ({\r\n      default: (\r\n        require(\"./views/Navigator\") as typeof import(\"./views/Navigator\")\r\n      ).DefaultNavigator,\r\n    }),\r\n    // Generate a fake file name for the directory\r\n    contextKey: \"./_layout.tsx\",\r\n    route: \"\",\r\n    generated: true,\r\n    dynamic: null,\r\n    children: routes,\r\n  };\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}