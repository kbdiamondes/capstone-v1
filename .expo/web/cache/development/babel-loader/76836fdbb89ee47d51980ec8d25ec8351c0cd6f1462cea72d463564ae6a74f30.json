{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { StackRouter, useNavigationBuilder } from \"@react-navigation/native\";\nimport * as React from \"react\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport { useContextKey } from \"../Route\";\nimport { useFilterScreenChildren } from \"../layouts/withLayoutContext\";\nimport { useSortedScreens } from \"../useScreens\";\nimport { Screen } from \"./Screen\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var NavigatorContext = React.createContext(null);\nif (process.env.NODE_ENV !== \"production\") {\n  NavigatorContext.displayName = \"NavigatorContext\";\n}\nexport function Navigator(_ref) {\n  var initialRouteName = _ref.initialRouteName,\n    screenOptions = _ref.screenOptions,\n    children = _ref.children,\n    router = _ref.router;\n  var contextKey = useContextKey();\n  var _useFilterScreenChild = useFilterScreenChildren(children, {\n      isCustomNavigator: true,\n      contextKey: contextKey\n    }),\n    screens = _useFilterScreenChild.screens,\n    otherSlot = _useFilterScreenChild.children;\n  var sorted = useSortedScreens(screens != null ? screens : []);\n  if (!sorted.length) {\n    console.warn(`Navigator at \"${contextKey}\" has no children.`);\n    return null;\n  }\n  return _jsx(QualifiedNavigator, {\n    initialRouteName: initialRouteName,\n    screenOptions: screenOptions,\n    screens: sorted,\n    contextKey: contextKey,\n    router: router,\n    children: otherSlot\n  });\n}\nfunction QualifiedNavigator(_ref2) {\n  var initialRouteName = _ref2.initialRouteName,\n    screenOptions = _ref2.screenOptions,\n    children = _ref2.children,\n    screens = _ref2.screens,\n    contextKey = _ref2.contextKey,\n    _ref2$router = _ref2.router,\n    router = _ref2$router === void 0 ? StackRouter : _ref2$router;\n  var _useNavigationBuilder = useNavigationBuilder(router, {\n      id: contextKey,\n      children: screens,\n      screenOptions: screenOptions,\n      initialRouteName: initialRouteName\n    }),\n    state = _useNavigationBuilder.state,\n    navigation = _useNavigationBuilder.navigation,\n    descriptors = _useNavigationBuilder.descriptors,\n    NavigationContent = _useNavigationBuilder.NavigationContent;\n  return _jsx(NavigatorContext.Provider, {\n    value: {\n      contextKey: contextKey,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors,\n      router: router\n    },\n    children: _jsx(NavigationContent, {\n      children: children\n    })\n  });\n}\nexport function useNavigatorContext() {\n  var context = React.useContext(NavigatorContext);\n  if (!context) {\n    throw new Error(\"useNavigatorContext must be used within a <Navigator />\");\n  }\n  return context;\n}\nexport function useSlot() {\n  var _descriptors$current$, _descriptors$current$2;\n  var context = useNavigatorContext();\n  var state = context.state,\n    descriptors = context.descriptors;\n  var current = state.routes.find(function (route, i) {\n    return state.index === i;\n  });\n  if (!current) {\n    return null;\n  }\n  return (_descriptors$current$ = (_descriptors$current$2 = descriptors[current.key]) == null ? void 0 : _descriptors$current$2.render()) != null ? _descriptors$current$ : null;\n}\nexport function Slot(props) {\n  var contextKey = useContextKey();\n  var context = React.useContext(NavigatorContext);\n  if ((context == null ? void 0 : context.contextKey) !== contextKey) {\n    return _jsx(Navigator, _objectSpread(_objectSpread({}, props), {}, {\n      children: _jsx(QualifiedSlot, {})\n    }));\n  }\n  return _jsx(QualifiedSlot, {});\n}\nexport function QualifiedSlot() {\n  return useSlot();\n}\nexport function DefaultNavigator() {\n  return _jsx(SafeAreaView, {\n    style: {\n      flex: 1\n    },\n    children: _jsx(Navigator, {\n      children: _jsx(QualifiedSlot, {})\n    })\n  });\n}\nNavigator.Slot = Slot;\nNavigator.useContext = useNavigatorContext;\nNavigator.Screen = Screen;","map":{"version":3,"names":["StackRouter","useNavigationBuilder","React","SafeAreaView","useContextKey","useFilterScreenChildren","useSortedScreens","Screen","jsx","_jsx","NavigatorContext","createContext","process","env","NODE_ENV","displayName","Navigator","_ref","initialRouteName","screenOptions","children","router","contextKey","_useFilterScreenChild","isCustomNavigator","screens","otherSlot","sorted","length","console","warn","QualifiedNavigator","_ref2","_ref2$router","_useNavigationBuilder","id","state","navigation","descriptors","NavigationContent","Provider","value","useNavigatorContext","context","useContext","Error","useSlot","_descriptors$current$","_descriptors$current$2","current","routes","find","route","i","index","key","render","Slot","props","_objectSpread","QualifiedSlot","DefaultNavigator","style","flex"],"sources":["C:/Users/acer/Documents/GitHub/collectify-front-end/node_modules/expo-router/src/views/Navigator.tsx"],"sourcesContent":["import {\r\n  RouterFactory,\r\n  StackRouter,\r\n  useNavigationBuilder,\r\n} from \"@react-navigation/native\";\r\nimport * as React from \"react\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\n\r\nimport { useContextKey } from \"../Route\";\r\nimport { useFilterScreenChildren } from \"../layouts/withLayoutContext\";\r\nimport { useSortedScreens } from \"../useScreens\";\r\nimport { Screen } from \"./Screen\";\r\n\r\ntype NavigatorTypes = ReturnType<typeof useNavigationBuilder>;\r\n\r\n// TODO: This might already exist upstream, maybe something like `useCurrentRender` ?\r\nexport const NavigatorContext = React.createContext<{\r\n  contextKey: string;\r\n  state: NavigatorTypes[\"state\"];\r\n  navigation: NavigatorTypes[\"navigation\"];\r\n  descriptors: NavigatorTypes[\"descriptors\"];\r\n  router: RouterFactory<any, any, any>;\r\n} | null>(null);\r\n\r\nif (process.env.NODE_ENV !== \"production\") {\r\n  NavigatorContext.displayName = \"NavigatorContext\";\r\n}\r\n\r\nexport type NavigatorProps = {\r\n  initialRouteName?: Parameters<\r\n    typeof useNavigationBuilder\r\n  >[1][\"initialRouteName\"];\r\n  screenOptions?: Parameters<typeof useNavigationBuilder>[1][\"screenOptions\"];\r\n  children?: Parameters<typeof useNavigationBuilder>[1][\"children\"];\r\n  router?: Parameters<typeof useNavigationBuilder>[0];\r\n};\r\n\r\n/** An unstyled custom navigator. Good for basic web layouts */\r\nexport function Navigator({\r\n  initialRouteName,\r\n  screenOptions,\r\n  children,\r\n  router,\r\n}: NavigatorProps) {\r\n  const contextKey = useContextKey();\r\n\r\n  // Allows adding Screen components as children to configure routes.\r\n  const { screens, children: otherSlot } = useFilterScreenChildren(children, {\r\n    isCustomNavigator: true,\r\n    contextKey,\r\n  });\r\n\r\n  const sorted = useSortedScreens(screens ?? []);\r\n\r\n  if (!sorted.length) {\r\n    console.warn(`Navigator at \"${contextKey}\" has no children.`);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <QualifiedNavigator\r\n      initialRouteName={initialRouteName}\r\n      screenOptions={screenOptions}\r\n      screens={sorted}\r\n      contextKey={contextKey}\r\n      router={router}\r\n    >\r\n      {otherSlot}\r\n    </QualifiedNavigator>\r\n  );\r\n}\r\n\r\nfunction QualifiedNavigator({\r\n  initialRouteName,\r\n  screenOptions,\r\n  children,\r\n  screens,\r\n  contextKey,\r\n  router = StackRouter,\r\n}: NavigatorProps & { contextKey: string; screens: React.ReactNode[] }) {\r\n  const { state, navigation, descriptors, NavigationContent } =\r\n    useNavigationBuilder(router, {\r\n      // Used for getting the parent with navigation.getParent('/normalized/path')\r\n      id: contextKey,\r\n      children: screens,\r\n      screenOptions,\r\n      initialRouteName,\r\n    });\r\n\r\n  return (\r\n    <NavigatorContext.Provider\r\n      value={{\r\n        contextKey,\r\n        state,\r\n        navigation,\r\n        descriptors,\r\n        router,\r\n      }}\r\n    >\r\n      <NavigationContent>{children}</NavigationContent>\r\n    </NavigatorContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useNavigatorContext() {\r\n  const context = React.useContext(NavigatorContext);\r\n  if (!context) {\r\n    throw new Error(\"useNavigatorContext must be used within a <Navigator />\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useSlot() {\r\n  const context = useNavigatorContext();\r\n\r\n  const { state, descriptors } = context;\r\n\r\n  const current = state.routes.find((route, i) => {\r\n    return state.index === i;\r\n  });\r\n\r\n  if (!current) {\r\n    return null;\r\n  }\r\n\r\n  return descriptors[current.key]?.render() ?? null;\r\n}\r\n\r\n/** Renders the currently selected content. */\r\nexport function Slot(props: Omit<NavigatorProps, \"children\">) {\r\n  const contextKey = useContextKey();\r\n  const context = React.useContext(NavigatorContext);\r\n  // Ensure the context is for the current contextKey\r\n  if (context?.contextKey !== contextKey) {\r\n    // Qualify the content and re-export.\r\n    return (\r\n      <Navigator {...props}>\r\n        <QualifiedSlot />\r\n      </Navigator>\r\n    );\r\n  }\r\n\r\n  return <QualifiedSlot />;\r\n}\r\n\r\nexport function QualifiedSlot() {\r\n  return useSlot();\r\n}\r\n\r\nexport function DefaultNavigator() {\r\n  return (\r\n    <SafeAreaView style={{ flex: 1 }}>\r\n      <Navigator>\r\n        <QualifiedSlot />\r\n      </Navigator>\r\n    </SafeAreaView>\r\n  );\r\n}\r\n\r\nNavigator.Slot = Slot;\r\nNavigator.useContext = useNavigatorContext;\r\n\r\n/** Used to configure route settings. */\r\nNavigator.Screen = Screen;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}