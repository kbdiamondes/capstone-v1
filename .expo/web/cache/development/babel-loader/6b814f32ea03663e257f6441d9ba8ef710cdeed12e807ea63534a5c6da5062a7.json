{"ast":null,"code":"export function findFocusedRoute(state) {\n  var _current2, _current$index3, _current3;\n  var current = state;\n  while (((_current = current) == null ? void 0 : _current.routes[(_current$index = current.index) != null ? _current$index : 0].state) != null) {\n    var _current, _current$index, _current$index2;\n    current = current.routes[(_current$index2 = current.index) != null ? _current$index2 : 0].state;\n  }\n  var route = (_current2 = current) == null ? void 0 : _current2.routes[(_current$index3 = (_current3 = current) == null ? void 0 : _current3.index) != null ? _current$index3 : 0];\n  return route;\n}","map":{"version":3,"names":["findFocusedRoute","state","_current2","_current$index3","_current3","current","_current","routes","_current$index","index","_current$index2","route"],"sources":["C:/Users/User/Documents/GitHub/Capstone/collectify/collectify-front-end/node_modules/expo-router/src/fork/findFocusedRoute.tsx"],"sourcesContent":["// Forked so we can access without importing any React Native code in Node.js environments.\r\n\r\nimport type { InitialState } from \"@react-navigation/routers\";\r\n\r\nexport function findFocusedRoute(state: InitialState) {\r\n  let current: InitialState | undefined = state;\r\n\r\n  while (current?.routes[current.index ?? 0].state != null) {\r\n    current = current.routes[current.index ?? 0].state;\r\n  }\r\n\r\n  const route = current?.routes[current?.index ?? 0];\r\n\r\n  return route;\r\n}\r\n"],"mappings":"AAIA,OAAO,SAASA,gBAAgBA,CAACC,KAAmB,EAAE;EAAA,IAAAC,SAAA,EAAAC,eAAA,EAAAC,SAAA;EACpD,IAAIC,OAAiC,GAAGJ,KAAK;EAE7C,OAAO,EAAAK,QAAA,GAAAD,OAAO,qBAAPC,QAAA,CAASC,MAAM,EAAAC,cAAA,GAACH,OAAO,CAACI,KAAK,YAAAD,cAAA,GAAI,CAAC,CAAC,CAACP,KAAK,KAAI,IAAI,EAAE;IAAA,IAAAK,QAAA,EAAAE,cAAA,EAAAE,eAAA;IACxDL,OAAO,GAAGA,OAAO,CAACE,MAAM,EAAAG,eAAA,GAACL,OAAO,CAACI,KAAK,YAAAC,eAAA,GAAI,CAAC,CAAC,CAACT,KAAK;EACpD;EAEA,IAAMU,KAAK,IAAAT,SAAA,GAAGG,OAAO,qBAAPH,SAAA,CAASK,MAAM,EAAAJ,eAAA,IAAAC,SAAA,GAACC,OAAO,qBAAPD,SAAA,CAASK,KAAK,YAAAN,eAAA,GAAI,CAAC,CAAC;EAElD,OAAOQ,KAAK;AACd"},"metadata":{},"sourceType":"module","externalDependencies":[]}