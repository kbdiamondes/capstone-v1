{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport Constants, { ExecutionEnvironment } from \"expo-constants\";\nimport * as Linking from \"expo-linking\";\nimport URL from \"url-parse\";\nfunction extractExactPathFromURL(url) {\n  if (url.match(/^https?:\\/\\//)) {\n    var _URL = new URL(url),\n      origin = _URL.origin,\n      href = _URL.href;\n    return href.replace(origin, \"\");\n  }\n  if (Constants.executionEnvironment === ExecutionEnvironment.StoreClient && url.match(/^exp(s)?:\\/\\//)) {\n    var _url$match;\n    var pathname = (_url$match = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)) == null ? void 0 : _url$match[1];\n    if (pathname) {\n      return fromDeepLink(\"a://\" + pathname);\n    }\n    var res = Linking.parse(url);\n    var qs = !res.queryParams ? \"\" : Object.entries(res.queryParams).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n        k = _ref2[0],\n        v = _ref2[1];\n      return `${k}=${v}`;\n    }).join(\"&\");\n    return adjustPathname({\n      hostname: res.hostname,\n      pathname: res.path || \"\"\n    }) + (qs ? \"?\" + qs : \"\");\n  }\n  return fromDeepLink(url);\n}\nfunction isExpoDevelopmentClient(url) {\n  return !!url.hostname.match(/^expo-development-client$/);\n}\nfunction fromDeepLink(url) {\n  var res = new URL(url, true);\n  if (isExpoDevelopmentClient(res)) {\n    if (!res.query || !res.query.url) {\n      return \"\";\n    }\n    var incomingUrl = res.query.url;\n    return extractExactPathFromURL(decodeURI(incomingUrl));\n  }\n  var qs = !res.query ? \"\" : Object.entries(res.query).map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n      k = _ref4[0],\n      v = _ref4[1];\n    return `${k}=${decodeURIComponent(v)}`;\n  }).join(\"&\");\n  var results = \"\";\n  if (res.host) {\n    results += res.host;\n  }\n  if (res.pathname) {\n    results += res.pathname;\n  }\n  if (qs) {\n    results += \"?\" + qs;\n  }\n  return results;\n}\nexport function extractExpoPathFromURL() {\n  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  return extractExactPathFromURL(url).replace(/^\\//, \"\");\n}\nexport function adjustPathname(url) {\n  if (url.hostname === \"exp.host\" || url.hostname === \"u.expo.dev\") {\n    return url.pathname.split(\"/\").slice(2).join(\"/\");\n  }\n  return url.pathname;\n}","map":{"version":3,"names":["Constants","ExecutionEnvironment","Linking","URL","extractExactPathFromURL","url","match","_URL","origin","href","replace","executionEnvironment","StoreClient","_url$match","pathname","fromDeepLink","res","parse","qs","queryParams","Object","entries","map","_ref","_ref2","_slicedToArray","k","v","join","adjustPathname","hostname","path","isExpoDevelopmentClient","query","incomingUrl","decodeURI","_ref3","_ref4","decodeURIComponent","results","host","extractExpoPathFromURL","arguments","length","undefined","split","slice"],"sources":["C:/Users/acer/Documents/GitHub/collectify-front-end/node_modules/expo-router/src/fork/extractPathFromURL.ts"],"sourcesContent":["import Constants, { ExecutionEnvironment } from \"expo-constants\";\r\nimport * as Linking from \"expo-linking\";\r\nimport URL from \"url-parse\";\r\n\r\n// This is only run on native.\r\nfunction extractExactPathFromURL(url: string): string {\r\n  if (\r\n    // If a universal link / app link / web URL is used, we should use the path\r\n    // from the URL, while stripping the origin.\r\n    url.match(/^https?:\\/\\//)\r\n  ) {\r\n    const { origin, href } = new URL(url);\r\n    return href.replace(origin, \"\");\r\n  }\r\n\r\n  // Handle special URLs used in Expo Go: `/--/pathname` -> `pathname`\r\n  if (\r\n    Constants.executionEnvironment === ExecutionEnvironment.StoreClient &&\r\n    // while not exhaustive, `exp` and `exps` are the only two schemes which\r\n    // are passed through to other apps in Expo Go.\r\n    url.match(/^exp(s)?:\\/\\//)\r\n  ) {\r\n    const pathname = url.match(/exps?:\\/\\/.*?\\/--\\/(.*)/)?.[1];\r\n    if (pathname) {\r\n      return fromDeepLink(\"a://\" + pathname);\r\n    }\r\n\r\n    const res = Linking.parse(url);\r\n\r\n    const qs = !res.queryParams\r\n      ? \"\"\r\n      : Object.entries(res.queryParams)\r\n          .map(([k, v]) => `${k}=${v}`)\r\n          .join(\"&\");\r\n    return (\r\n      adjustPathname({ hostname: res.hostname, pathname: res.path || \"\" }) +\r\n      (qs ? \"?\" + qs : \"\")\r\n    );\r\n  }\r\n\r\n  // TODO: Support dev client URLs\r\n\r\n  return fromDeepLink(url);\r\n}\r\n\r\n/** Major hack to support the makeshift expo-development-client system. */\r\nfunction isExpoDevelopmentClient(\r\n  url: URL<Record<string, string | undefined>>\r\n): boolean {\r\n  return !!url.hostname.match(/^expo-development-client$/);\r\n}\r\n\r\nfunction fromDeepLink(url: string): string {\r\n  // This is for all standard deep links, e.g. `foobar://` where everything\r\n  // after the `://` is the path.\r\n  const res = new URL(url, true);\r\n\r\n  if (isExpoDevelopmentClient(res)) {\r\n    if (!res.query || !res.query.url) {\r\n      return \"\";\r\n    }\r\n    const incomingUrl = res.query.url;\r\n    return extractExactPathFromURL(decodeURI(incomingUrl));\r\n  }\r\n\r\n  const qs = !res.query\r\n    ? \"\"\r\n    : Object.entries(res.query as Record<string, string>)\r\n        .map(([k, v]) => `${k}=${decodeURIComponent(v)}`)\r\n        .join(\"&\");\r\n\r\n  let results = \"\";\r\n\r\n  if (res.host) {\r\n    results += res.host;\r\n  }\r\n\r\n  if (res.pathname) {\r\n    results += res.pathname;\r\n  }\r\n\r\n  if (qs) {\r\n    results += \"?\" + qs;\r\n  }\r\n\r\n  return results;\r\n}\r\n\r\nexport function extractExpoPathFromURL(url: string = \"\") {\r\n  // TODO: We should get rid of this, dropping specificities is not good\r\n  return extractExactPathFromURL(url).replace(/^\\//, \"\");\r\n}\r\n\r\nexport function adjustPathname(url: {\r\n  hostname?: string | null;\r\n  pathname: string;\r\n}) {\r\n  if (url.hostname === \"exp.host\" || url.hostname === \"u.expo.dev\") {\r\n    // drop the first two segments from pathname:\r\n    return url.pathname.split(\"/\").slice(2).join(\"/\");\r\n  }\r\n  return url.pathname;\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}